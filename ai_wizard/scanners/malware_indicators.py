"""Malware indicators scanner computing metadata & optional hash for IOC files."""
from __future__ import annotations

import hashlib
import os
import stat
from pathlib import Path
from typing import List

from cyberzard.config import (
    MALICIOUS_FILE_PATHS,
    Severity,
    Category,
    RecommendedAction,
)
from cyberzard.core.models import Finding
from cyberzard.scanners.base import BaseScanner, register, ScanContext

MAX_HASH_SIZE = 10 * 1024 * 1024  # 10MB


def _sha256(path: Path) -> str:
    h = hashlib.sha256()
    with path.open('rb') as f:
        for chunk in iter(lambda: f.read(8192), b''):
            h.update(chunk)
    return h.hexdigest()


@register
class MalwareIndicatorsScanner(BaseScanner):
    name = "malware_indicators"
    description = "Detects known malicious IOC files and records metadata/hash."

    def scan(self, context: ScanContext) -> List[Finding]:
        findings: List[Finding] = []
        for raw in MALICIOUS_FILE_PATHS:
            # Ignore simple wildcard entries here; handled by file_paths scanner
            if '*' in raw:
                continue
            p = Path(raw)
            if not p.exists():
                continue
            try:
                st = p.stat()
                size = st.st_size
                mode = stat.filemode(st.st_mode)
                owner = st.st_uid
                hash_val = None
                hash_note = None
                if size <= MAX_HASH_SIZE and p.is_file():
                    try:
                        hash_val = _sha256(p)
                    except Exception:
                        hash_note = "hash_failed"
                else:
                    hash_note = "skipped_large_file"
                findings.append(
                    Finding(
                        category=Category.file,
                        severity=Severity.critical,
                        indicator=str(p),
                        message=f"IOC file present: {p}",
                        rationale="Known malicious indicator from IOC list",
                        path=p,
                        recommended_action=RecommendedAction.remove,
                        removable=True,
                        extra={
                            "size": size,
                            "mode": mode,
                            "owner": owner,
                            "sha256": hash_val,
                            "hash_note": hash_note,
                        },
                    )
                )
            except Exception:
                continue
        return findings


__all__ = ["MalwareIndicatorsScanner"]
